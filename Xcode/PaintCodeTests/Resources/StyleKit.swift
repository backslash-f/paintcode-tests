//
//  StyleKit.swift
//  PaintCodeTests
//
//  Created by Fernando Fernandes on 8/6/17.
//  Copyright Â© 2017 backslash-f. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKit : NSObject {
    
    /// FIXME: This is deleted everytime the PaintCode class is re-exported.
    static var touchedElementID: CGFloat?

    //// Drawing Methods

    @objc dynamic public class func drawClockHand(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 200, height: 200), resizing: ResizingBehavior = .aspectFit, rotation: CGFloat = 2159) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 200, height: 200), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 200, y: resizedFrame.height / 200)



        //// Variable Declarations
        let rotationSanitized: CGFloat = rotation > 1 ? fmod(rotation, 360) * -1 : 0
        let touchedElementID: CGFloat = rotationSanitized <= -352 || rotationSanitized >= -8 ? 1 : (rotationSanitized <= -82 && rotationSanitized >= -98 ? 2 : (rotationSanitized <= -172 && rotationSanitized >= -188 ? 3 : (rotationSanitized <= -262 && rotationSanitized >= -278 ? 4 : 0)))

        //// TouchedElementIDPlaceholder Drawing
        context.saveGState()
        context.rotate(by: -1 * CGFloat.pi/180)

        context.saveGState()
        context.setAlpha(touchedElementID)
        
        /// FIXME: This is deleted everytime the PaintCode class is re-exported.
        StyleKit.touchedElementID = touchedElementID

        context.restoreGState()

        context.restoreGState()


        //// Rectangle4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 0, y: 92, width: 16, height: 16))
        UIColor.blue.setFill()
        rectangle4Path.fill()


        //// Rectangle3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 92, y: 184, width: 16, height: 16))
        UIColor.green.setFill()
        rectangle3Path.fill()


        //// Rectangle2 Drawing
        let rectangle2Path = UIBezierPath(rect: CGRect(x: 184, y: 92, width: 16, height: 16))
        UIColor.black.setFill()
        rectangle2Path.fill()


        //// Rectangle1 Drawing
        let rectangle1Path = UIBezierPath(rect: CGRect(x: 92, y: 0, width: 16, height: 16))
        UIColor.gray.setFill()
        rectangle1Path.fill()


        //// ClockHandRedBezier Drawing
        context.saveGState()
        context.translateBy(x: 100, y: 100)
        context.rotate(by: -rotationSanitized * CGFloat.pi/180)

        let clockHandRedBezierPath = UIBezierPath()
        clockHandRedBezierPath.move(to: CGPoint(x: 0, y: -95))
        clockHandRedBezierPath.addLine(to: CGPoint(x: 0, y: -95))
        clockHandRedBezierPath.addLine(to: CGPoint(x: 0, y: -95))
        clockHandRedBezierPath.addLine(to: CGPoint(x: 0.25, y: -95))
        clockHandRedBezierPath.addCurve(to: CGPoint(x: 4.63, y: -92.21), controlPoint1: CGPoint(x: 2.21, y: -95), controlPoint2: CGPoint(x: 3.96, y: -93.89))
        clockHandRedBezierPath.addCurve(to: CGPoint(x: 5, y: -88.14), controlPoint1: CGPoint(x: 5, y: -91.14), controlPoint2: CGPoint(x: 5, y: -90.14))
        clockHandRedBezierPath.addLine(to: CGPoint(x: 5, y: 0.37))
        clockHandRedBezierPath.addCurve(to: CGPoint(x: 4.67, y: 2.04), controlPoint1: CGPoint(x: 5, y: 0.14), controlPoint2: CGPoint(x: 5, y: 1.14))
        clockHandRedBezierPath.addLine(to: CGPoint(x: 4.63, y: 2.21))
        clockHandRedBezierPath.addCurve(to: CGPoint(x: 0.25, y: 5), controlPoint1: CGPoint(x: 3.96, y: 3.89), controlPoint2: CGPoint(x: 2.21, y: 5))
        clockHandRedBezierPath.addCurve(to: CGPoint(x: 0, y: 5), controlPoint1: CGPoint(x: -0, y: 5), controlPoint2: CGPoint(x: 0, y: 5))
        clockHandRedBezierPath.addLine(to: CGPoint(x: 0, y: 5))
        clockHandRedBezierPath.addLine(to: CGPoint(x: 0, y: 5))
        clockHandRedBezierPath.addLine(to: CGPoint(x: -0.25, y: 5))
        clockHandRedBezierPath.addCurve(to: CGPoint(x: -4.63, y: 2.21), controlPoint1: CGPoint(x: -2.21, y: 5), controlPoint2: CGPoint(x: -3.96, y: 3.89))
        clockHandRedBezierPath.addCurve(to: CGPoint(x: -5, y: -1.86), controlPoint1: CGPoint(x: -5, y: 1.14), controlPoint2: CGPoint(x: -5, y: 0.14))
        clockHandRedBezierPath.addLine(to: CGPoint(x: -5, y: 0.37))
        clockHandRedBezierPath.addCurve(to: CGPoint(x: -4.67, y: -92.04), controlPoint1: CGPoint(x: -5, y: -90.14), controlPoint2: CGPoint(x: -5, y: -91.14))
        clockHandRedBezierPath.addLine(to: CGPoint(x: -4.63, y: -92.21))
        clockHandRedBezierPath.addCurve(to: CGPoint(x: -0.25, y: -95), controlPoint1: CGPoint(x: -3.96, y: -93.89), controlPoint2: CGPoint(x: -2.21, y: -95))
        clockHandRedBezierPath.addCurve(to: CGPoint(x: 0, y: -95), controlPoint1: CGPoint(x: 0, y: -95), controlPoint2: CGPoint(x: 0, y: -95))
        clockHandRedBezierPath.addLine(to: CGPoint(x: 0, y: -95))
        clockHandRedBezierPath.close()
        UIColor.red.setFill()
        clockHandRedBezierPath.fill()

        context.restoreGState()
        
        context.restoreGState()

    }




    @objc(StyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
